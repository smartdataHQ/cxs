apiVersion: batch/v1
kind: Job
metadata:
  name: minio-generate-admin-credentials-job
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: credential-generator
        image: bitnami/kubectl:latest
        env:
        - name: SECRET_NAME
          value: "minio-admin-credentials"
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Checking if $SECRET_NAME secret already exists..."
          if kubectl get secret "$SECRET_NAME" -n data >/dev/null 2>&1; then
            echo "Secret $SECRET_NAME already exists, exiting successfully"
            exit 0
          fi
          
          echo "Generating secure password..."
          ROOT_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
          
          echo "Creating $SECRET_NAME secret..."
          kubectl create secret generic "$SECRET_NAME" \
            --from-literal=accesskey=minioadmin \
            --from-literal=secretkey="$ROOT_PASSWORD" \
            -n data
          
          echo "MinIO credentials secret $SECRET_NAME created successfully with auto-generated password"
      serviceAccountName: minio-credentials-sa
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio-credentials-sa
  
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: minio-credentials-role
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: minio-credentials-binding
subjects:
- kind: ServiceAccount
  name: minio-credentials-sa
roleRef:
  kind: Role
  name: minio-credentials-role
  apiGroup: rbac.authorization.k8s.io