apiVersion: batch/v1
kind: Job
metadata:
  name: minio-generate-admin-credentials-job
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: credential-generator
        image: bitnamilegacy/kubectl:latest
        env:
        - name: CONFIG_SECRET_NAME
          value: "minio-tenant-config"
        - name: CREDS_SECRET_NAME
          value: "minio-admin-credentials"
        - name: NAMESPACE
          value: "data"
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Checking if secret already exists..."
          if kubectl get secret "storage-configuration" -n "$NAMESPACE" >/dev/null 2>&1; then
            echo "Secret storage-configuration already exists, exiting successfully"
            exit 0
          fi
          
          echo "Generating secure password..."
          ROOT_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
          
          echo "Creating storage-configuration secret in minio-tenant namespace..."
          
          # Create the secret YAML with proper stringData format
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: $CONFIG_SECRET_NAME
            namespace: "$NAMESPACE"
          type: Opaque
          stringData:
            config.env: |-
              export MINIO_ROOT_USER="minio"
              export MINIO_ROOT_PASSWORD="$ROOT_PASSWORD"
          EOF
          
          echo "Creating additional credentials secret for applications..."
          kubectl create secret generic "$CREDS_SECRET_NAME" \
            --from-literal=MINIO_ROOT_USER=minio \
            --from-literal=MINIO_ROOT_PASSWORD="$ROOT_PASSWORD" \
            -n "$NAMESPACE" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl label secret "$CREDS_SECRET_NAME" -n "$NAMESPACE" created-by=minio-generate-admin-credentials-job
          kubectl label secret "$CONFIG_SECRET_NAME" -n "$NAMESPACE" created-by=minio-generate-admin-credentials-job
          
          echo "MinIO credentials secrets created successfully with auto-generated password"
      serviceAccountName: minio-credentials-sa
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio-credentials-sa
  
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: minio-credentials-role
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: minio-credentials-binding
subjects:
- kind: ServiceAccount
  name: minio-credentials-sa
roleRef:
  kind: Role
  name: minio-credentials-role
  apiGroup: rbac.authorization.k8s.io