apiVersion: batch/v1
kind: Job
metadata:
  name: minio-generate-admin-credentials-job
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: credential-generator
        image: bitnami/kubectl:latest
        env:
        - name: CONFIG_SECRET_NAME
          value: "minio-tenant-config"
        - name: CREDS_SECRET_NAME
          value: "minio-admin-credentials"
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Checking if secrets already exist..."
          if kubectl get secret "$CONFIG_SECRET_NAME" -n data >/dev/null 2>&1 && kubectl get secret "$CREDS_SECRET_NAME" -n data >/dev/null 2>&1; then
            echo "Both secrets already exist, exiting successfully"
            exit 0
          fi
          
          echo "Generating secure password..."
          ROOT_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
          
          echo "Creating $CONFIG_SECRET_NAME secret (config.env format for operator)..."
          kubectl create secret generic "$CONFIG_SECRET_NAME" \
            --from-literal=config.env="export MINIO_ROOT_USER=\"minioadmin\"; export MINIO_ROOT_PASSWORD=\"$ROOT_PASSWORD\"" \
            -n data
          
          echo "Creating $CREDS_SECRET_NAME secret (standard format for applications)..."
          kubectl create secret generic "$CREDS_SECRET_NAME" \
            --from-literal=MINIO_ROOT_USER=minioadmin \
            --from-literal=MINIO_ROOT_PASSWORD="$ROOT_PASSWORD" \
            --from-literal=MINIO_ACCESS_KEY=minioadmin \
            --from-literal=MINIO_SECRET_KEY="$ROOT_PASSWORD" \
            -n data
          
          echo "MinIO credentials secrets created successfully with auto-generated password"
      serviceAccountName: minio-credentials-sa
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio-credentials-sa
  
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: minio-credentials-role
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: minio-credentials-binding
subjects:
- kind: ServiceAccount
  name: minio-credentials-sa
roleRef:
  kind: Role
  name: minio-credentials-role
  apiGroup: rbac.authorization.k8s.io