name: mimir-on-pre

x-logging: &default-logging
  driver: json-file
  options:
    max-size: "50m"
    max-file: "3"  # Rotate logs to prevent disk fill (best practice)

x-resource-limits: &default-limits
  deploy:
    resources:
      limits:
        cpus: '1.0'  # Prevent CPU hogging (adjust for AI services)
        memory: 2G   # Limit memory to avoid OOM (increase for embeddings)
      reservations:
        cpus: '0.5'
        memory: 1G

services:
  clickhouse:
    image: clickhouse/clickhouse-server:25.8.2.29-alpine
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - "8123:8123"
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-cst}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    networks:
      - app
    logging: *default-logging
    healthcheck:  # Best practice: Verify DB readiness (uses /ping endpoint)
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8123/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    <<: *default-limits

  redis:
    image: redis:8.2.1-alpine
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - app
    logging: *default-logging
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:  # Best practice: Ping Redis
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    <<: *default-limits


  mimir-server:
    image: quicklookup/cxs-mimir-api:ff2f102
    platform: linux/amd64
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      ENV: ${ENVIRONMENT:-prod}
      NO_SSO: ${NO_SSO:-false}
      NO_OBSERVABILITY: ${NO_OBSERVABILITY:-false}
      # Data services
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: ${CLICKHOUSE_PORT:-8123}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-default}
      CLICKHOUSE_PASSWORD_LLM: ${CLICKHOUSE_PASSWORD_LLM:-${CLICKHOUSE_PASSWORD}}
      # External endpoints
      EVENTS_ENDPOINT: ${INBOX_EVENTS_ENDPOINT:-https://inbox.contextsuite.com/api/s/s2s/track}
      # Public base URL (external hostname for UI/API)
      BACKEND_BASE_URL: ${PUBLIC_BASE_URL:-http://localhost}
      # LLM providers (customer-configured)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY:-}
      AZURE_OPENAI_API_BASE: ${AZURE_OPENAI_API_BASE:-}
      AZURE_OPENAI_API_VERSION: ${AZURE_OPENAI_API_VERSION:-}
      AZURE_OPENAI_API_TYPE: ${AZURE_OPENAI_API_TYPE:-azure}
      # Other secrets/integrations (optional)
      CONTEXT_SUITE_JWT_SECRET_KEY: ${CONTEXT_SUITE_JWT_SECRET_KEY:-context-suite-f31a2a5f86f6cbc6a828110da9a4807d}
      VOYAGE_API_KEY: ${VOYAGE_API_KEY:-}
      UNSTRUCTURED_API_KEY: ${UNSTRUCTURED_API_KEY}
      TAVILY_API_KEY: ${TAVILY_API_KEY:-}
      TOKEN_SECRET_KEY: ${TOKEN_SECRET_KEY}
      SFTP_USERNAME: ${SFTP_USERNAME:-}
      SFTP_PASSWORD: ${SFTP_PASSWORD:-}
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY:-}
      HF_TOKEN: ${HF_TOKEN:-}
      UNSTRUCTURED_API_URL: ${UNSTRUCTURED_API_URL:-https://api.unstructuredapp.io}
      # On-prem specific
      ONPREM_WRITE_KEY: ${ONPREM_WRITE_KEY}
      ONPREM_ORGANIZATION: ${ONPREM_ORGANIZATION}
      ONPREM_ORGANIZATION_GID: ${ONPREM_ORGANIZATION_GID}
      ONPREM_PARTITION: ${ONPREM_PARTITION}
    networks:
      - app
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    <<: *default-limits

  mimir-ui:
    image: quicklookup/mimir-chat:5a6d071
    platform: linux/amd64
    restart: unless-stopped
    depends_on:
      mimir-server:
        condition: service_healthy
    ports:
      - "3000:3000"
    command: ["npm", "run", "start"]
    environment:
      AUTH_URL: ${PUBLIC_BASE_URL:-http://localhost:3000}
      BROWSER_APP_API: ${PUBLIC_BASE_URL:-http://localhost:3000}
      BROWSER_CHAT_API: ${PUBLIC_BASE_URL:-http://localhost:8000}
      BROWSER_CHAT_WSS_API: ${PUBLIC_BASE_URL:-ws://localhost:8000}
      MIMIR_SERVER_API: http://mimir-server:8000
      CONTEXTSUITE_ADMIN_API: ${NEAREST_CXS_ADMIN_URL:-https://admin.contextsuite.com}
      BOT_IDENTIFIER: ${BOT_IDENTIFIER:-skattur_agent_dev}
      AUTH_TRUST_HOST: true
      AUTH_SECRET: ${CUSTOMER_BASED_SECRET:-SomeSecretStringToReplace}
    networks:
      - app
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    <<: *default-limits

  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
    platform: linux/amd64
    restart: unless-stopped
    depends_on:
      mimir-ui:
        condition: service_healthy
    environment:
      OAUTH2_PROXY_PROVIDER: oidc
      OAUTH2_PROXY_OIDC_ISSUER_URL: ${OIDC_ISSUER_URL:-}
      OAUTH2_PROXY_CLIENT_ID: ${OIDC_CLIENT_ID:-}
      OAUTH2_PROXY_CLIENT_SECRET: ${OIDC_CLIENT_SECRET:-}
      OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2_PROXY_COOKIE_SECRET:-}
      OAUTH2_PROXY_REDIRECT_URL: ${PUBLIC_BASE_URL}/oauth2/callback
      OAUTH2_PROXY_EMAIL_DOMAINS: '*'
      OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:4180
      OAUTH2_PROXY_UPSTREAMS: http://mimir-ui:3000
      OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER: 'true'
      OAUTH2_PROXY_SET_AUTHORIZATION_HEADER: 'true'
      OAUTH2_PROXY_COOKIE_SECURE: ${TLS_ENABLED:-false}
      OAUTH2_PROXY_COOKIE_SAMESITE: lax
      OAUTH2_PROXY_COOKIE_NAME: _mimir_sso
      OAUTH2_PROXY_SCOPE: openid profile email
      OAUTH2_PROXY_WHITELIST_DOMAINS: ${PUBLIC_HOSTNAME}
      OAUTH2_PROXY_COOKIE_DOMAINS: ${PUBLIC_HOSTNAME}
    networks:
      - app
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:4180/ping || exit 1"]  # OAuth2 /ping endpoint
      interval: 30s
      timeout: 10s
      retries: 3
    <<: *default-limits
    profiles: ["auth"]  # Optional profile for SSO

  mimir-nginx:
    image: nginx:1.27-alpine
    platform: linux/amd64
    restart: unless-stopped
    depends_on:
      mimir-server:
        condition: service_healthy
      mimir-ui:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${NGINX_CONF:-./nginx/default.conf}:/etc/nginx/conf.d/default.conf:ro
      - ${TLS_CERTS_DIR:-./certs}:/etc/nginx/certs:ro
    networks:
      - app
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    <<: *default-limits

volumes:
  clickhouse-data:
    driver: local  # Best practice: Explicit driver for portability
  redis-data:
    driver: local
  hf-cache:
    driver: local
  torch-cache:
    driver: local

networks:
  app:
    name: mimir-on-pre-net
    driver: bridge
    ipam:
      config:
        - subnet: ${DOCKER_SUBNET:-172.31.250.0/24}
          gateway: ${DOCKER_GATEWAY:-172.31.250.1}


